:root {
  font-size: 20px;
}

body {
  /* 这里使用了flex 让内容左右居中。 其实都是用过很多遍的老方法了 */
  display: flex;
  justify-content: center;
  align-items: center;
  min-height: 100vh;
}

h1 {
  /* 4rem 即  4 * 20px */
  font-size: 4rem;
  margin: 0;
  padding: 0;

  /* 等宽字体效果 使用的是一套等宽的字体 */
  font-family: monospace;

  /* 这里是真的牛逼 新知识 CSS3的单位 ch */
  /* ch 是 character 的意思，即是一个单字  1ch 的宽度等于数目字0的宽度*/
  /* 由于我们使用了等宽字体 所以1ch就等于任何英文字、数字、符号等的宽度 */
  /* ch 和 overflow: hidden 搭配的效果也是很优秀的 */

  /* forwards 是停留到最后一帧 */
  /* steps(13, jump-none) 代表这个动画会分为13格去显示 */
  /* width: 6ch;
  overflow: hidden;
  animation: 3s typing steps(13, jump-none) forwards; */

  position: relative;
  /* relative 和 伪元素更配哦！ */
}

/* @keyframes typing {
  from {
    width: 1ch;
  }
  to {
    width: 13ch;
  }
} */

/* 这应该是相当于在h1的最后写一根竖线，只不过h1在不断增加？ */
h1::after {
  /* 这里为什么要写成content:''呢？ */
  content: "";
  /* 这里弄个行内块是有什么用呢？ */
  /* ::after 默认是 inline */
  display: inline-block;
  position: absolute;

  width: 12px;
  height: 4rem;
  background-color: #000;
  border-radius: 2px;
  /* 这里的-30px是故意让竖线右移一点 */
  right: -30px;
  /* animation: 0.1s cursor steps(2, jump-none) infinite; */
}

/* 这个h1.ended::after 是一个什么用法呢？ 这是为了保证打字的时候游标不闪烁，打完字后才闪烁，硬记这个效果 */
h1.ended::after {
  /* steps(2, jump-none)是为了达到两个影格的效果，而不是要渐出渐显的过渡效果 */
  animation: 1.1s cursor steps(2, jump-none) infinite;
}

@keyframes cursor {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

h1 span {
  --delay: 10s;
  /* 让span达到横向排列也有宽高的效果 */
  display: inline-block;
  overflow: hidden;
  width: 0ch;
  animation: 0.1s text-in ease-in-out forwards;
  /* 每一个span都有一个字母，但都是延迟出现 */
  animation-delay: var(--delay);
}

/* 这里的命名都是 -  而不是_或驼峰 */
@keyframes text-in {
  from {
    width: 0ch;
  }
  to {
    width: 1ch;
  }
}
